from collections import deque # Εισαγωγή της deque από την βιβλιοθήκη collections για χρήση με την αναζήτηση BFS (πλάγιοι κόμβοι)

""" Η κλάση PathFinding χρησιμοποιεί τον αλγόριθμο BFS για να βρει μονοπάτια σε έναν χάρτη.
 Η αναζήτηση γίνεται από έναν αρχικό κόμβο (θέση NPC ή παίκτη) έως έναν στόχο.
 Το γράφημα κατασκευάζεται από τον χάρτη του παιχνιδιού,
 όπου κάθε κόμβος αντιστοιχεί σε μια ελεύθερη θέση στο παιχνίδι.
 Η αναζήτηση αποφεύγει τις θέσεις που είναι κατειλημμένες από NPCs ή τοίχους,
 και επιστρέφει την διαδρομή που ακολουθεί ο NPC για να φτάσει στον στόχο. """

class PathFinding:
    def __init__(self,game):
        self.game = game 
        self.map = game.map.mini_map # Ανάθεση του μικρού χάρτη (mini_map) του παιχνιδιού
        self.ways = [-1,0],[0,-1],[1,0],[0,1],[-1,-1],[1,-1],[1,1],[-1,1] # Ορισμός των κατευθύνσεων κίνησης (πάνω, κάτω, αριστερά, δεξιά, διαγώνιες κινήσεις)
        self.graph = {} # Δομή για τον γραφικό χάρτη του κόσμου
        self.get_graph() # Δημιουργία του γραφήματος του χάρτη
     
    # Συνάρτηση για την εύρεση του μονοπατιού από την αρχική θέση μέχρι τον στόχο    
    def get_path(self, start, goal): #Αυτή η μέθοδος καλεί την bfs για να υπολογίσει τους κόμβους που πρέπει να επισκεφθεί ο χαρακτήρας (NPC). Η bfs αναζητά το μονοπάτι μέσω των κόμβων και επιστρέφει την ακολουθία των θέσεων που ακολουθεί ο χαρακτήρας, από τον στόχο προς την αρχή. 
        # Επιστρέφει τη διαδρομή που ακολουθεί το NPC από την αρχική θέση στον στόχο
        self.visited = self.bfs(start,goal,self.graph) # Κλήση της BFS για την εύρεση των επισκεπτόμενων κόμβων
        path = [goal] # Αρχικοποιούμε το μονοπάτι με την τελική θέση (στόχος)
        step = self.visited.get(goal,start)  # Λήψη του πρώτου βήματος από το στόχο
        
        # Επαναλαμβάνουμε για κάθε επόμενο βήμα προς τα πίσω (από στόχο προς αρχική θέση)
        while step and step != start:
            path.append(step)  # Προσθήκη του επόμενου βήματος στο μονοπάτι
            step=self.visited[step]  # Αλλαγή του τρέχοντος βήματος στο προηγούμενο
        return path[-1]  # Επιστροφή του τελευταίου βήματος (το οποίο είναι το πρώτο βήμα στην πορεία)
    
    # Συνάρτηση BFS για την αναζήτηση του μονοπατιού από την αρχική θέση στον στόχο  
    def bfs(self, start,goal,graph): # Αναζήτηση BFS (bfs):

#Η BFS (Breadth-First Search) είναι ένας αλγόριθμος που εξετάζει τους κόμβους σε "ευρύτερη" βάση (πρώτα όλους τους γείτονες ενός κόμβου, μετά τους γείτονες των γειτόνων κλπ.).
#Η bfs αποθηκεύει ποιους κόμβους έχουμε επισκεφτεί και ποιους δεν έχουμε, καθώς και την διαδρομή από τον στόχο στον αρχικό κόμβο.
        queue = deque([start])  # Δημιουργία μιας ουράς για την αναζήτηση
        visited = {start: None}  # Λεξικό για αποθήκευση των επισκεμμένων κόμβων και του γονέα τους (κανένας γονέας στην αρχή)

        
        while queue: # Όσο υπάρχουν κόμβοι στην ουρά για επεξεργασία
            cur_node = queue.popleft()  # Αφαιρούμε τον πρώτο κόμβο από την ουρά
            if cur_node == goal: # Αν φτάσουμε στον στόχο, σταματάμε την αναζήτηση
                break
            next_nodes = graph[cur_node] # Παίρνουμε τους επόμενους γειτονικούς κόμβους από το γράφημα
            
            for next_node in next_nodes:   # Διατρέχουμε τους γειτονικούς κόμβους
                if next_node not in visited and next_node not in self.game.object_handler.npc_positions: # Εάν δεν έχουν επισκεφτεί, και δεν είναι NPC θέσεις (αυτές θα εμποδίζουν την κίνηση)
                    queue.append(next_node) # Προσθήκη του κόμβου στην ουρά
                    visited[next_node]= cur_node # Αποθήκευση του τρέχοντος κόμβου ως γονέα του νέου κόμβου
        return visited # Επιστρέφουμε το λεξικό των επισκεμμένων κόμβων και των γονέων τους
    
        # Συνάρτηση για την εύρεση των γειτονικών κόμβων
    def get_next_nodes(self,x,y):
        # Επιστρέφει μια λίστα με τους γειτονικούς κόμβους που δεν ανήκουν στον κόσμο (δηλαδή είναι ανοιχτοί)
        return [(x + dx, y + dy) for dx,dy in self.ways if (x + dx , y + dy )not in self.game.map.world_map]


     # Συνάρτηση για τη δημιουργία του γραφήματος του χάρτη
    def get_graph(self):
        for y, row in enumerate(self.map):  # Διατρέχουμε όλες τις γραμμές του χάρτη
            for x, col in enumerate(row):  # Διατρέχουμε όλες τις στήλες κάθε γραμμής
                if not col:  # Αν το στοιχείο είναι ελεύθερος χώρος (όχι τοίχος)
                    self.graph[(x,y)] = self.graph.get ((x,y), []) + self.get_next_nodes(x, y)   # Προσθήκη των γειτονικών κόμβων στο γράφημα